policy_module(qubes-gui-agent, 1)


gen_require(`

	type etc_t;
	type iceauth_t;
	type iceauth_exec_t;
	type proc_t;
	type qrexec-agent_su_t;
	type qubes_u2mfn_t;
	type qubes_var_run_t;
	type shell_exec_t;
	type su_exec_t;
	type usr_t;
	type xauth_exec_t;
	')


########################################
# 
# Definitions
#

type qubes-gui_t;
type qubes-gui_exec_t;
init_daemon_domain(qubes-gui_t, qubes-gui_exec_t)

  type qubes-gui_sh_t;
  application_type(qubes-gui_sh_t)
  corecmd_shell_entry_type(qubes-gui_sh_t)
  role system_r types qubes-gui_sh_t;

    type qubes-run-xorg_t;
    type qubes-run-xorg_exec_t;
    application_domain(qubes-run-xorg_t, qubes-run-xorg_exec_t)
    role system_r types qubes-run-xorg_t;

      type qubes-run-xorg_su_t;
      application_domain(qubes-run-xorg_su_t, su_exec_t)
      role system_r types qubes-run-xorg_su_t;

        type qubes-run-xorg_sh_t;
        application_type(qubes-run-xorg_sh_t)
        corecmd_shell_entry_type(qubes-run-xorg_sh_t)
        role system_r types qubes-run-xorg_sh_t;

          type qubes-run-xorg_xinit_t;
          application_type(qubes-run-xorg_xinit_t)
          corecmd_bin_entry_type(qubes-run-xorg_xinit_t)
          role system_r types qubes-run-xorg_xinit_t;

            # Minimal session. Getting this to run
            # under another role is ...tricky
            # since new_role doesn't accept origin
            # domain.
            #
            # Just put it all under qubes-gui_dummy_t.

            type qubes-gui_dummy_t;
            application_type(qubes-gui_dummy_t)
            corecmd_shell_entry_type(qubes-gui_dummy_t)
            domain_entry_file(qubes-gui_dummy_t, etc_t)
            role system_r types qubes-gui_dummy_t;

              role system_r types iceauth_t;

      #
      # ( sed | chown | chmod )
      #

      type qubes-run-xorg_worker_t;
      application_type(qubes-run-xorg_worker_t)
      corecmd_bin_entry_type(qubes-run-xorg_worker_t)
      role system_r types qubes-run-xorg_worker_t;

type qubes-gui_etc_t;
files_config_file(qubes-gui_etc_t)

type qubes-gui_initrc_exec_t;
init_script_file(qubes-gui_initrc_exec_t)

type qubes-gui_log_t;
logging_log_file(qubes-gui_log_t)

type qubes-gui_var_run_t;
files_type(qubes-gui_var_run_t)


########################################
#
# iceauth_t local policy
#

# /dev/null:
#
qubes_gui_use_fds(iceauth_t)

########################################
#
# qrexec-agent_su_t local policy
#

xserver_domtrans_xauth(qubes-run-xorg_su_t)


########################################
#
# qubes-gui_t local policy
#

allow qubes-gui_t { proc_t qubes_u2mfn_t } : file { read write open ioctl };

allow qubes-gui_t qubes-gui_log_t : file append;

filetrans_pattern(qubes-gui_t, var_run_t, qubes-gui_var_run_t, sock_file, "xf86-qubes-socket")
allow qubes-gui_t qubes-gui_var_run_t : sock_file { create unlink };

# For XErrorDB
#
allow qubes-gui_t usr_t : file { read open getattr };


dev_rw_xen(qubes-gui_t)

fs_search_xenfs(qubes-gui_t)
allow qubes-gui_t xenfs_t : file { getattr read write open };

xserver_read_user_xauth(qubes-gui_t)
xserver_stream_connect(qubes-gui_t)


corecmd_shell_domtrans(qubes-gui_t, qubes-gui_sh_t)


########################################
#
# qubes-gui-dummy_t local policy
#

corecmd_exec_bin(qubes-gui_dummy_t)

# Only meminfo:
#
kernel_dontaudit_read_system_state(qubes-gui_dummy_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-gui_dummy_t)

#
# Xsession
#

# HOME_DIR/.xsession_errors:
#
allow qubes-gui_dummy_t qubes-run-xorg_sh_t : fd use;

#
# chmod
#

allow qubes-gui_dummy_t user_home_dir_t : file setattr;

#
# xsm
#

allow qubes-gui_dummy_t self : tcp_socket create;

# For lock and config:
#
userdom_list_user_home_dirs(qubes-gui_dummy_t)
create_files_pattern(qubes-gui_dummy_t, user_home_dir_t, user_home_dir_t)
delete_files_pattern(qubes-gui_dummy_t, user_home_dir_t, user_home_dir_t)
allow qubes-gui_dummy_t user_home_dir_t : file { write link read };

# For share/.../XSm:
#
allow qubes-gui_dummy_t usr_t : file { read open getattr };

xserver_create_xdm_tmp_sockets(qubes-gui_dummy_t)
delete_sock_files_pattern(qubes-gui_dummy_t, xdm_tmp_t, xdm_tmp_t)
xserver_stream_connect(qubes-gui_dummy_t)


corecmd_exec_shell(qubes-gui_dummy_t)
domtrans_pattern(qubes-gui_dummy_t, iceauth_exec_t, iceauth_t)


########################################
#
# qubes-gui_sh_t local policy
#

corecmd_read_bin_symlinks(qubes-gui_sh_t)

# Only meminfo:
#
kernel_dontaudit_read_system_state(qubes-gui_sh_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-gui_sh_t)


domtrans_pattern(qubes-gui_sh_t, qubes-run-xorg_exec_t, qubes-run-xorg_t)


########################################
#
# qubes-run-xorg_t local policy
#

allow qubes-run-xorg_t qubes-gui_etc_t : file { read open write };

allow qubes-run-xorg_t shell_exec_t : file read;

# Only meminfo:
#
kernel_dontaudit_read_system_state(qubes-run-xorg_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_t)


corecmd_bin_domtrans(qubes-run-xorg_t, qubes-run-xorg_worker_t)

domtrans_pattern(qubes-run-xorg_t, su_exec_t, qubes-run-xorg_su_t)


########################################
#
# qubes-run-xorg_sh_t local policy
#

# shell_exec_t:
#
allow qubes-run-xorg_sh_t qubes-run-xorg_su_t : fd use;

allow qubes-run-xorg_sh_t qubes-run-xorg_su_t : process sigchld;

# Only meminfo:
#
kernel_dontaudit_read_system_state(qubes-run-xorg_sh_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_sh_t)

# HOME_DIR/.xsession_errors:
#
userdom_search_user_home_dirs(qubes-run-xorg_sh_t)
create_files_pattern(qubes-run-xorg_sh_t, user_home_dir_t, user_home_dir_t)
allow qubes-run-xorg_sh_t user_home_dir_t : file write;


corecmd_bin_domtrans(qubes-run-xorg_sh_t, qubes-run-xorg_xinit_t)


########################################
#
# qubes-run-xorg_su_t local policy
#

allow qubes-run-xorg_su_t self : capability { setgid setuid };
allow qubes-run-xorg_su_t self : fifo_file read;
allow qubes-run-xorg_su_t self : process setsched;

allow qubes-run-xorg_su_t xauth_exec_t : file execute;


auth_domtrans_chk_passwd(qubes-run-xorg_su_t)

init_read_utmp(qubes-run-xorg_su_t)

kernel_read_kernel_sysctls(qubes-run-xorg_su_t)

# filesystems:
#
kernel_dontaudit_read_system_state(qubes-run-xorg_su_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_su_t)

selinux_compute_access_vector(qubes-run-xorg_su_t)

# Preserve cwd:
#
# TEST W/O THIS LATER
userdom_search_user_home_dirs(qubes-run-xorg_su_t)


corecmd_shell_domtrans(qubes-run-xorg_su_t, qubes-run-xorg_sh_t)


########################################
#
# qubes-run-xorg_worker_t local policy
#

allow qubes-run-xorg_worker_t qubes-run-xorg_t : process sigchld;

#
# chmod
#

allow qubes-run-xorg_worker_t self : capability fsetid;

#
# chown
#

allow qubes-run-xorg_worker_t self : capability chown;

allow qubes-run-xorg_worker_t qubes-gui_var_run_t : sock_file { getattr setattr };


auth_use_nsswitch(qubes-run-xorg_worker_t)

#
# sed
#

allow qubes-run-xorg_worker_t qubes-run-xorg_t : fd use;
allow qubes-run-xorg_worker_t qubes-gui_etc_t : file { read write getattr };

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_worker_t)


########################################
#
# qubes-run-xorg_xinit_t local policy
#

# HOME_DIR/.xsession_errors:
#
allow qubes-run-xorg_xinit_t qubes-run-xorg_sh_t : fd use;
allow qubes-run-xorg_xinit_t user_home_dir_t : file write;
auditallow qubes-run-xorg_xinit_t user_home_dir_t : file { open read getattr };

allow qubes-run-xorg_xinit_t qubes-run-xorg_sh_t : process sigchld;

allow qubes-run-xorg_xinit_t self : process setpgid;


# F uuu to etc_t:dir read
#
exec_files_pattern(qubes-run-xorg_xinit_t, etc_t, etc_t)

corecmd_read_bin_symlinks(qubes-run-xorg_xinit_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_xinit_t)

xserver_read_user_xauth(qubes-run-xorg_xinit_t)
xserver_stream_connect(qubes-run-xorg_xinit_t)


corecmd_bin_domtrans(qubes-run-xorg_xinit_t, qubes-gui_dummy_t)
corecmd_shell_domtrans(qubes-run-xorg_xinit_t, qubes-gui_dummy_t)

domtrans_pattern(qubes-run-xorg_xinit_t, etc_t, qubes-gui_dummy_t)

# Since there's no xserver domain template, without reimplementing
# xserver_t (ew), qubes-gui must be able to connect to xserver_t,
# as must the session manager.
#
# MLS could solve this problem, but Gentoo doesn't play nicely with
# MLS policy. This needs work.

xserver_domtrans(qubes-run-xorg_xinit_t)


########################################
#
# xserver_t local policy
#

# HOME_DIR/.xsession_errors:
#
allow xserver_t qubes-run-xorg_sh_t : fd use;
allow xserver_t user_home_dir_t : file write;

allow xserver_t qubes-run-xorg_xinit_t : process signal;


qubes_gui_read_etc(xserver_t)

qubes_gui_stream_write(xserver_t)

# /dev/null:
#
qubes_gui_use_fds(xserver_t)
