policy_module(qubes-gui, 1)


gen_require(`

	attribute qubes_init_domain;

	type initrc_state_t;
	type qrexec-agent_su_t;
	type qrexec-agent_initrc_exec_t;
	type qubes-rpc-multiplexer_sh_t;
	type qubes_u2mfn_t;
	type qubesdb_initrc_exec_t;
	type su_exec_t;
	type tmpfiles_t;
	')


########################################
#
# Definitions
#

# <desc>
#	<p>
#		Hide monitor layout.
#	</p>
# </desc>

gen_tunable(qubes_gui_bluepill_monitor, true)

#type qubes-gui_t;
#type qubes-gui_exec_t;
#init_daemon_domain(qubes-gui_t, qubes-gui_exec_t)

type qubes-gui_t;
domain_type(qubes-gui_t)
type qubes-gui_exec_t;
domain_entry_file(qubes-gui_t, qubes-gui_exec_t)
role system_r types qubes-gui_t;

  type qubes-gui_sh_t;
  domain_type(qubes-gui_sh_t)
  corecmd_shell_entry_type(qubes-gui_sh_t)
  role system_r types qubes-gui_sh_t;

    type qubes-run-xorg_t;
    domain_type(qubes-run-xorg_t)
    type qubes-run-xorg_exec_t;
    domain_entry_file(qubes-run-xorg_t, qubes-run-xorg_exec_t)
    role system_r types qubes-run-xorg_t;

      type qubes-run-xorg_su_t;
      domain_type(qubes-run-xorg_su_t)
      domain_entry_file(qubes-run-xorg_su_t, su_exec_t)
      role system_r types qubes-run-xorg_su_t;

        type qubes-run-xorg_sh_t;
        domain_type(qubes-run-xorg_sh_t)
        corecmd_shell_entry_type(qubes-run-xorg_sh_t)
        role system_r types qubes-run-xorg_sh_t;

          type qubes-run-xorg_xinit_t;
          domain_type(qubes-run-xorg_xinit_t)
          corecmd_bin_entry_type(qubes-run-xorg_xinit_t)
          role system_r types qubes-run-xorg_xinit_t;

            type qubes-run-xorg_xinitrc_t;
            domain_type(qubes-run-xorg_xinitrc_t)
            corecmd_shell_entry_type(qubes-run-xorg_xinitrc_t)
            role system_r types qubes-run-xorg_xinitrc_t;

              type qubes-run-xorg_xinitrc_worker_t;
              domain_type(qubes-run-xorg_xinitrc_worker_t)
              corecmd_bin_entry_type(qubes-run-xorg_xinitrc_worker_t)
              role system_r types qubes-run-xorg_xinitrc_worker_t;

      #
      # ( sed | chown | chmod )
      #

      type qubes-run-xorg_worker_t;
      domain_type(qubes-run-xorg_worker_t)
      corecmd_bin_entry_type(qubes-run-xorg_worker_t)
      role system_r types qubes-run-xorg_worker_t;

role system_r types xauth_t;

type qubes-gui_initrc_t, qubes_init_domain;
type qubes-gui_initrc_exec_t;
init_script_domain(qubes-gui_initrc_t, qubes-gui_initrc_exec_t)

type qubes-session_t;
domain_type(qubes-session_t)
type qubes-session_exec_t;
domain_entry_file(qubes-session_t, qubes-session_exec_t)
role system_r types qubes-session_t;

type qubes-set-monitor-layout_t;
domain_type(qubes-set-monitor-layout_t)
type qubes-set-monitor-layout_exec_t;
domain_entry_file(qubes-set-monitor-layout_t, qubes-set-monitor-layout_exec_t)
role system_r types qubes-set-monitor-layout_t;

  # ( grep | sleep | xrandr )
  #
  type qubes-set-monitor-layout_worker_t;
  domain_type(qubes-set-monitor-layout_worker_t)
  corecmd_bin_entry_type(qubes-set-monitor-layout_worker_t)
  role system_r types qubes-set-monitor-layout_worker_t;

type qubes-gui_etc_t;
files_config_file(qubes-gui_etc_t)

type qubes-gui_log_t;
logging_log_file(qubes-gui_log_t)

type qubes-gui_var_run_t;
files_type(qubes-gui_var_run_t)


define(`qubes_userspace_highlimit',`

	s5:c0.c1023
')

define(`qubes_userspace_range',

	mls_systemlow` - 'qubes_userspace_highlimit
)


########################################
#
# qrexec-agent_su_t local policy
#

xserver_domtrans_xauth(qrexec-agent_su_t)


########################################
#
# qubes-gui_t local policy
#

filetrans_pattern(qubes-gui_t, var_run_t, qubes-gui_var_run_t, sock_file, "xf86-qubes-socket")
allow qubes-gui_t qubes-gui_var_run_t : sock_file { create unlink };

# For XErrorDB
#
allow qubes-gui_t usr_t : file { read open getattr };


corecmd_shell_domtrans(qubes-gui_t, qubes-gui_sh_t)
neverallow ~qubes-gui_t  qubes-gui_sh_t : process transition;
neverallow qubes-gui_t shell_exec_t : file execute_no_trans;

dev_rw_xen(qubes-gui_t)
#allowxperm qubes-gui_t xen_device_t : chr_file ioctl { 0x4502 0x4705 0x4706 0x4707 };
#neverallowxperm qubes-gui_t xen_device_t : chr_file ioctl ~{ 0x4502 0x4705 0x4706 0x4707 };

fs_search_xenfs(qubes-gui_t)
allow qubes-gui_t xenfs_t : file { getattr read write open ioctl };
#allowxperm qubes-gui_t xenfs_t : file ioctl 0x5000;
#neverallowxperm qubes-gui_t xenfs_t : file ioctl ~0x5000;

qubes_core_search_qubes_log(qubes-gui_log_t)
allow qubes-gui_t qubes-gui_log_t : file { append ioctl };

xserver_read_user_xauth(qubes-gui_t)
xserver_stream_connect(qubes-gui_t)


# /dev/xen/xenbus
#
allow qubes-gui_t device_t : chr_file { getattr read write open };

# Without this, window titles all stick as 'Untitled'
#
allow qubes-gui_t locale_t : dir search;
allow qubes-gui_t locale_t : file { read open };
dontaudit qubes-gui_t locale_t : file getattr;

neverallow qubes-gui_t ~qubes-gui_exec_t : file entrypoint;


########################################
#
# qubes-gui_initrc_t local policy
#

domtrans_pattern(qubes-gui_initrc_t, qubes-gui_exec_t, qubes-gui_t)
ifdef(`enable_mls',`

	range_transition qubes-gui_initrc_t qubes-gui_exec_t : process qubes_userspace_range;
')
neverallow ~qubes-gui_initrc_t qubes-gui_t : process transition;
neverallow qubes-gui_initrc_t qubes-gui_exec_t : file execute_no_trans;

# ( cmdline | filesystems | meminfo )
#
kernel_dontaudit_read_system_state(qubes-gui_initrc_t)

qubes_core_search_qubes_log(qubes-gui_initrc_t)
allow qubes-gui_initrc_t qubes-gui_log_t : file { append open };

qubes_core_create_qubes_var_run_files(qubes-gui_initrc_t)
qubes_core_write_qubes_var_run_files(qubes-gui_initrc_t)

userdom_dontaudit_search_user_home_dirs(qubes-gui_initrc_t)


allow qubes-gui_initrc_t self : process setrlimit;

allow qubes-gui_initrc_t initrc_state_t : dir { create_dir_perms delete_dir_perms };

neverallow qubes-gui_initrc_t ~qubes-gui_initrc_exec_t : file entrypoint;

dontaudit qubes-gui_initrc_t proc_t : dir mounton;

# Dependency: need qrexec-agent
#
init_read_script_files(qubes-gui_initrc_t)
init_dontaudit_read_all_script_files(qubes-gui_initrc_t)
allow qubes-gui_initrc_t qrexec-agent_initrc_exec_t : file getattr;
allow qubes-gui_initrc_t qubesdb_initrc_exec_t : file getattr;


# Stop
#
qubes_core_read_qubes_var_run_files(qubes-gui_initrc_t)
kernel_list_proc(qubes-gui_initrc_t)
allow qubes-gui_initrc_t qubes-gui_t : process { signal signull };
allow qubes-gui_initrc_t qubes-run-xorg_sh_t : process signal;
allow qubes-gui_initrc_t qubes-run-xorg_su_t : process signal;
allow qubes-gui_initrc_t qubes-run-xorg_xinit_t : process signal;
allow qubes-gui_initrc_t qubes-run-xorg_xinitrc_t : process signal;
allow qubes-gui_initrc_t qubes-run-xorg_xinitrc_worker_t : process signal;
allow qubes-gui_initrc_t xserver_t : process signal;
allow qubes-gui_initrc_t self : capability kill;
auditallow qubes-gui_initrc_t self : capability kill;
qubes_core_delete_qubes_var_run_files(qubes-gui_initrc_t)


########################################
#
# qubes-gui_sh_t local policy
#

corecmd_read_bin_symlinks(qubes-gui_sh_t)

files_dontaudit_read_etc_files(qubes-gui_sh_t)

# Only meminfo:
#
kernel_dontaudit_read_system_state(qubes-gui_sh_t)

qubes_core_bluepill_locale(qubes-gui_sh_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-gui_sh_t)

domtrans_pattern(qubes-gui_sh_t, qubes-run-xorg_exec_t, qubes-run-xorg_t)
neverallow ~qubes-gui_sh_t qubes-run-xorg_t : process transition;
neverallow qubes-gui_sh_t qubes-run-xorg_exec_t : file execute_no_trans;


neverallow qubes-gui_sh_t ~shell_exec_t : file entrypoint;


########################################
#
# qubes-run-xorg_t local policy
#

allow qubes-run-xorg_t qubes-gui_etc_t : file { read open write };

# ( shell | ld )
#
allow qubes-run-xorg_t qubes-gui_sh_t : fd use;
allow qubes-run-xorg_t shell_exec_t : file read;

neverallow qubes-run-xorg_t ~qubes-run-xorg_exec_t : file entrypoint;


# nsswitch
#
files_dontaudit_read_etc_files(qubes-run-xorg_t)

# meminfo:
#
kernel_dontaudit_read_system_state(qubes-run-xorg_t)

qubes_core_bluepill_locale(qubes-run-xorg_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_t)


corecmd_bin_domtrans(qubes-run-xorg_t, qubes-run-xorg_worker_t)
neverallow ~qubes-run-xorg_t qubes-run-xorg_worker_t : process transition;
neverallow qubes-run-xorg_t qubes-run-xorg_worker_t : file execute_no_trans;

domtrans_pattern(qubes-run-xorg_t, su_exec_t, qubes-run-xorg_su_t)
neverallow qubes-run-xorg_t su_exec_t : file execute_no_trans;


########################################
#
# qubes-run-xorg_sh_t local policy
#

# shell_exec_t:
#
allow qubes-run-xorg_sh_t qubes-run-xorg_su_t : fd use;

allow qubes-run-xorg_sh_t qubes-run-xorg_su_t : process sigchld;

# meminfo:
#
kernel_dontaudit_read_system_state(qubes-run-xorg_sh_t)

qubes_core_bluepill_locale(qubes-run-xorg_sh_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_sh_t)

# HOME_DIR/.xsession_errors:
#
userdom_search_user_home_dirs(qubes-run-xorg_sh_t)
create_files_pattern(qubes-run-xorg_sh_t, user_home_dir_t, user_home_dir_t)
allow qubes-run-xorg_sh_t user_home_dir_t : file write;

corecmd_bin_domtrans(qubes-run-xorg_sh_t, qubes-run-xorg_xinit_t)
neverallow qubes-run-xorg_sh_t bin_t : file execute_no_trans;


########################################
#
# qubes-run-xorg_su_t local policy
#

allow qubes-run-xorg_su_t self : capability { setgid setuid };
allow qubes-run-xorg_su_t self : fifo_file { write read };
allow qubes-run-xorg_su_t self : netlink_selinux_socket { create bind };
allow qubes-run-xorg_su_t self : process setsched;

neverallow qubes-run-xorg_su_t ~su_exec_t : file entrypoint;

# Note: execute alone permits checking +x permission only.
#
allow qubes-run-xorg_su_t xauth_exec_t : file execute;
neverallow qubes-run-xorg_su_t xauth_exec_t : file execute_no_trans;;


auth_domtrans_chk_passwd(qubes-run-xorg_su_t)

files_dontaudit_search_tmp(qubes-run-xorg_su_t)

init_read_utmp(qubes-run-xorg_su_t)

kernel_read_kernel_sysctls(qubes-run-xorg_su_t)

# filesystems:
#
kernel_dontaudit_read_system_state(qubes-run-xorg_su_t)

logging_send_syslog_msg(qubes-run-xorg_su_t)

qubes_core_bluepill_locale(qubes-run-xorg_su_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_su_t)

selinux_compute_access_vector(qubes-run-xorg_su_t)

# Preserve cwd:
#
# TEST W/O THIS LATER
#
userdom_search_user_home_dirs(qubes-run-xorg_su_t)


corecmd_shell_domtrans(qubes-run-xorg_su_t, qubes-run-xorg_sh_t)
neverallow ~qubes-run-xorg_su_t qubes-run-xorg_sh_t : process transition;
neverallow qubes-run-xorg_su_t shell_exec_t : file execute_no_trans;


########################################
#
# qubes-run-xorg_worker_t local policy
#

allow qubes-run-xorg_worker_t qubes-run-xorg_t : process sigchld;

neverallow qubes-run-xorg_worker_t ~bin_t : file entrypoint;

#
# chmod
#

allow qubes-run-xorg_worker_t self : capability fsetid;

#
# chown
#

allow qubes-run-xorg_worker_t self : capability chown;

allow qubes-run-xorg_worker_t qubes-gui_var_run_t : sock_file { getattr setattr };


auth_use_nsswitch(qubes-run-xorg_worker_t)

#
# sed
#

allow qubes-run-xorg_worker_t qubes-run-xorg_t : fd use;
allow qubes-run-xorg_worker_t qubes-gui_etc_t : file { read write getattr };

# filesystems
#
kernel_dontaudit_read_system_state(qubes-run-xorg_worker_t)

qubes_core_bluepill_locale(qubes-run-xorg_worker_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_worker_t)


########################################
#
# qubes-run-xorg_xinit_t local policy
#

corecmd_shell_domtrans(qubes-run-xorg_xinit_t, qubes-run-xorg_xinitrc_t)
neverallow ~qubes-run-xorg_xinit_t qubes-run-xorg_xinitrc_t : process transition;
neverallow qubes-run-xorg_xinit_t shell_exec_t : file execute_no_trans;

# HOME_DIR/.xsession_errors:
#
allow qubes-run-xorg_xinit_t qubes-run-xorg_sh_t : fd use;
allow qubes-run-xorg_xinit_t user_home_dir_t : file write;
auditallow qubes-run-xorg_xinit_t user_home_dir_t : file { open read getattr };

allow qubes-run-xorg_xinit_t qubes-run-xorg_sh_t : process sigchld;

allow qubes-run-xorg_xinit_t self : process setpgid;


# F uuu to etc_t:dir read
#
exec_files_pattern(qubes-run-xorg_xinit_t, etc_t, etc_t)

corecmd_read_bin_symlinks(qubes-run-xorg_xinit_t)

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_xinit_t)

xserver_read_user_xauth(qubes-run-xorg_xinit_t)
xserver_stream_connect(qubes-run-xorg_xinit_t)

# .xsession-errors:
#
allow qubes-run-xorg_xinitrc_t qubes-run-xorg_sh_t : fd use;
allow qubes-run-xorg_xinitrc_t user_home_dir_t : file write;


# Since there's no xserver domain template, without reimplementing
# xserver_t (ew), qubes-gui must be able to connect to xserver_t.

xserver_domtrans(qubes-run-xorg_xinit_t)


########################################
#
# qubes-run-xorg_xinitrc_t local policy
#

corecmd_bin_domtrans(qubes-run-xorg_xinitrc_t, qubes-run-xorg_xinitrc_worker_t)
neverallow ~qubes-run-xorg_xinitrc_t qubes-run-xorg_xinitrc_worker_t : process transition;
neverallow qubes-run-xorg_xinitrc_t bin_t : file execute_no_trans;

# meminfo:
#
kernel_dontaudit_read_system_state(qubes-run-xorg_xinitrc_t)

qubes_core_bluepill_locale(qubes-run-xorg_xinitrc_t)


allow qubes-run-xorg_xinitrc_t qubes-run-xorg_xinit_t : process sigchld;


# /dev/null
#
qubes_gui_use_fds(qubes-run-xorg_xinitrc_t)


# shell:
#
allow qubes-run-xorg_xinitrc_t qubes-run-xorg_xinit_t : fd use;


########################################
#
# qubes-run-xorg_xinitrc_worker_t local policy
#

# This can be limited to just sleep (really).

qubes_core_bluepill_locale(qubes-run-xorg_xinitrc_worker_t)


allow qubes-run-xorg_xinitrc_worker_t qubes-run-xorg_xinitrc_t : process sigchld;

# /dev/null
#
allow qubes-run-xorg_xinitrc_worker_t qubes-run-xorg_xinitrc_t : fd use;

# /dev/null:
#
qubes_gui_use_fds(qubes-run-xorg_xinitrc_worker_t)

# .session-errors:
#
allow qubes-run-xorg_xinitrc_worker_t qubes-run-xorg_sh_t : fd use;
allow qubes-run-xorg_xinitrc_worker_t user_home_dir_t : file write;


#########################################
#
# qubes-set-monitor-layout_t local policy
#

qubes_core_bluepill_locale(qubes-set-monitor-layout_t)


neverallow qubes-set-monitor-layout_t ~qubes-set-monitor-layout_exec_t : file entrypoint;


#########################################
#
# qubes-set-monitor-layout_worker_t local policy
#

qubes_core_bluepill_locale(qubes-set-monitor-layout_worker_t)

#
# xrandr
#

auth_use_nsswitch(qubes-set-monitor-layout_worker_t)


neverallow qubes-set-monitor-layout_worker_t ~bin_t : file entrypoint;


#########################################
#
# tmpfiles_t local policy
#

allow tmpfiles_t qubes-gui_log_t : file { create getattr setattr };


########################################
#
# xserver_t local policy
#

allow xserver_t qubes_u2mfn_t : file { read open write ioctl };
#allowxperm xserver_t qubes_u2mfn_t : ioctl 0xF501;
#neveallowxperm xserver_t qubes_u2mfn_t : ioctl ~0xF501;

# HOME_DIR/.xsession_errors:
#
allow xserver_t qubes-run-xorg_sh_t : fd use;
allow xserver_t user_home_dir_t : file write;

allow xserver_t qubes-run-xorg_xinit_t : process signal;


qubes_gui_read_qubes_gui_etc(xserver_t)

qubes_gui_stream_write(xserver_t)

# /dev/null:
#
qubes_gui_use_fds(xserver_t)

ifdef(`enable_mls',`

	# Make it a little bit harder for anything
	# but xserver to write to u2mfn by making
	# qubes_u2mfn_t qubes_userspace_limit...
	#
	mls_trusted_object(qubes_u2mfn_t)
')

########################################
#
# Tunable policy
#

tunable_policy(`! qubes_gui_bluepill_monitor',`

	#########################################
	#
	# qubes-rpc-multiplexer_sh_t local policy
	#

	domtrans_pattern(qubes-rpc-multiplexer_sh_t, qubes-set-monitor-layout_exec_t, qubes-set-monitor-layout_t)
#	neverallow ~qubes-rpc-multiplexer_sh_t qubes-set-monitor-layout_t : process transition;
#	neverallow qubes-rpc-multiplexer_sh_t qubes-set-monitor-layout_exec_t : file execute_no_trans;


	#########################################
	#
	# qubes-set-monitor-layout_t local policy
	#

	corecmd_bin_domtrans(qubes-set-monitor-layout_t, qubes-set-monitor-layout_worker_t)
#	neverallow ~qubes-set-monitor-layout_t qubes-set-monitor-layout_worker_t : process transition;
#	neverallow qubes-set-monitor-layout_t bin_t : file execute_no_trans;

	#files_dontaudit_search_home(qubes-set-monitor-layout_t)
	#userdom_dontaudit_search_user_home_dirs(qubes-set-monitor-layout_t)
	userdom_search_user_home_dirs(qubes-set-monitor-layout_t)

	qubes_core_rw_inherited_qrexec_agent_pipes(qubes-set-monitor-layout_t)

	qubes_core_write_inherited_qubes_rpc_stderror(qubes-set-monitor-layout_t)

	qubes_core_rw_qrexec_agent_stream_sockets(qubes-set-monitor-layout_t)


	allow qubes-set-monitor-layout_t self : fifo_file read;

	# /dev/null
	#
	qubes_core_use_qrexec_agent_sh_fds(qubes-set-monitor-layout_t)

	allow qubes-set-monitor-layout_t shell_exec_t : file read;


	#########################################
	#
	# qubes-set-monitor-layout_worker_t local policy
	#

	qubes_core_rw_inherited_qrexec_agent_pipes(qubes-set-monitor-layout_worker_t)

	allow qubes-set-monitor-layout_worker_t qubes-set-monitor-layout_t : process sigchld;

	#
	# grep
	#

	allow qubes-set-monitor-layout_worker_t qubes-set-monitor-layout_t : fifo_file read;

	#
	# sleep
	#

	qubes_core_write_inherited_qubes_rpc_stderror(qubes-set-monitor-layout_worker_t)

	# /dev/null
	#
	allow qubes-set-monitor-layout_worker_t qubes-rpc-multiplexer_sh_t : fd use;
	allow qubes-set-monitor-layout_worker_t qubes-set-monitor-layout_t : fd use;

	#
	# xrandr
	#

	# pipefs:
	#
	allow qubes-set-monitor-layout_worker_t qubes-set-monitor-layout_t : fifo_file write;

	# /dev/null
	#
	qubes_core_use_qrexec_agent_sh_fds(qubes-set-monitor-layout_worker_t)

	qubes_core_rw_qrexec_agent_stream_sockets(qubes-set-monitor-layout_worker_t)

	files_search_tmp(qubes-set-monitor-layout_worker_t)

	allow qubes-set-monitor-layout_worker_t self : udp_socket { create connect write read };
	auditallow qubes-set-monitor-layout_worker_t self : udp_socket read;

	gen_require(`
		type xdm_tmp_t;
		')
	allow qubes-set-monitor-layout_worker_t xdm_tmp_t : dir search;
	xserver_stream_connect(qubes-set-monitor-layout_worker_t)
')


########################################
#
# Conditional policy
#


# This is controlled by policy ebuild USE flags.


ifdef(`use_pulseaudio',`

	gen_require(`

		type device_t;
		type pulseaudio_t;
	')

	fs_search_xenfs(pulseaudio_t)
	#
	# /proc/xen/privcmd
	#
	allow pulseaudio_t xenfs_t : file { read write open };


	# /dev/xen/gntalloc
	#
	allow pulseaudio_t xen_device_t : chr_file { read write open };

	# /dev/xen/evtchn
	#
	allow pulseaudio_t xen_device_t : chr_file ioctl;
	auditallow pulseaudio_t xen_device_t : chr_file ioctl;

	# /dev/xen/xenbus
	#
	allow pulseaudio_t device_t : chr_file { getattr read write open };


	optional_policy(`

		gen_require(`

			type user_screen_t;
		')

		allow pulseaudio_t user_screen_t : fd use;
	')
')


# testing...

        xserver_object_types_template(qubes-gui)
        xserver_common_x_domain_template(qubes-gui, qubes-gui_t)
