policy_module(qubes-core, 1)


gen_require(`

	attribute fixed_disk_raw_read;
	attribute proc_type;

	role sysadm_r;
	role user_r;

	type configfs_t;
	type kernel_t;
	type shell_exec_t;
	type su_exec_t;
	type sysadm_t;
	type tmpfiles_t;
	type user_t;
	type user_tmp_t;
	type var_lib_t;
	type xauth_exec_t;
')


########################################
#
# Declarations
#

## <desc>
##	<p>
##		Allow qvm-run inside domU.
##	</p>
##	<p>
##		qrexec-agent_sh execs directly, so you must prefix commands with 'qbkdr_run'
##		e.g.:
##	</p>
##	<p>
##			qvm-run gentoo_vm qbkdr_run\ ls
##	</p>
##	<p>
##		Note that user_t will run as system_u, so UBAC will be useless.
##	</p>
## <desc>

gen_tunable(qubes_backdoor, false)

## <desc>
##	<p>
##		Permit pass-io to dom0 using cat.
##	</p>
## </desc>

gen_tunable(qubes_core_pass_io, false)

## <desc>
##	<p>
##		Hide locale, in particular the timezone.
##	</p>
##	<p>
##		Unfortunately, language and keyboard layout have the same type.
##	</p>
## </desc>

gen_tunable(qubes_bluepill_timezone, true)


# Make sure that the transition vectors are
# known and have been inspected (or at least
# that you have a chance to read them.)
#
attribute qubes_init_domain;

type qbkdr_run_exec_t;
application_domain(user_t, qbkdr_run_exec_t)

type qfile-unpacker_t;
type qfile-unpacker_exec_t;
init_system_domain(qfile-unpacker_t, qfile-unpacker_exec_t)

type qrexec-agent_t;
type qrexec-agent_exec_t;
init_daemon_domain(qrexec-agent_t, qrexec-agent_exec_t)

  type qrexec-agent_su_t;
  init_system_domain(qrexec-agent_su_t, su_exec_t)

    type qrexec-agent_sh_t;
    init_system_domain(qrexec-agent_sh_t, shell_exec_t)

      # ( tty | date )
      #
      type qrexec-agent_worker_t;
      application_type(qrexec-agent_worker_t)
      corecmd_bin_entry_type(qrexec-agent_worker_t)
      role system_r types qrexec-agent_worker_t;

      type qubes-rpc-multiplexer_t;
      type qubes-rpc-multiplexer_exec_t;
      init_system_domain(qubes-rpc-multiplexer_t, qubes-rpc-multiplexer_exec_t)

        # Called for incoming copy:
        #
        type qubes-rpc-multiplexer_sh_t;
        application_type(qubes-rpc-multiplexer_sh_t)

          # ( find | xargs )
          #
          type qubes-rpc-multiplexer_sh_worker_t;
          application_type(qubes-rpc-multiplexer_sh_worker_t)

            # ( awk | sleep )
            #
            type qubes-rpc-multiplexer_sh_awk_t;
            application_type(qubes-rpc-multiplexer_sh_awk_t)

        # ( mkfifo, logger, rm )
        #
        type qubes-rpc-multiplexer_worker_t;
        application_type(qubes-rpc-multiplexer_worker_t)
        corecmd_bin_entry_type(qubes-rpc-multiplexer_worker_t)
        role system_r types qubes-rpc-multiplexer_worker_t;

attribute qrexec-client-vm_domain;

  attribute qrexec-client-vm_sh_domain;

    attribute qrexec-client-vm_sh_worker_domain;

  attribute qrexec-client-vm_worker_domain;

type qrexec-client-vm_t, qrexec-client-vm_domain;
type qrexec-client-vm_exec_t;
application_domain(qrexec-client-vm_t, qrexec-client-vm_exec_t)

  type qfile-agent_t;
  type qfile-agent_exec_t;
  application_domain(qfile-agent_t, qfile-agent_exec_t)

  type qrexec-client-vm_sh_t, qrexec-client-vm_sh_domain;
  application_type(qrexec-client-vm_sh_t)
  corecmd_shell_entry_type(qrexec-client-vm_sh_t)

type qrexec-agent_initrc_t, qubes_init_domain;
type qrexec-agent_initrc_exec_t;
files_type(qrexec-agent_initrc_exec_t)
init_script_domain(qrexec-agent_initrc_t, qrexec-agent_initrc_exec_t)

type qrexec-agent_log_t;
logging_log_file(qrexec-agent_log_t)

type qubes-core_initrc_t, fixed_disk_raw_read, qubes_init_domain;
type qubes-core_initrc_exec_t;
files_type(qubes-core_initrc_exec_t)
init_script_domain(qubes-core_initrc_t, qubes-core_initrc_exec_t)

type qubes-net_initrc_t, qubes_init_domain;
type qubes-net_initrc_exec_t;
files_type(qubes-net_initrc_exec_t)
init_script_domain(qubes-net_initrc_t, qubes-net_initrc_exec_t)

# Note: qubesdb is >R3 only
#
type qubesdb_t;
type qubesdb_exec_t;
files_type(qubesdb_exec_t)
init_daemon_domain(qubesdb_t, qubesdb_exec_t)

type qubesdb-cmd_t;
type qubesdb-cmd_exec_t;
application_domain(qubesdb-cmd_t, qubesdb-cmd_exec_t)
role system_r types qubesdb-cmd_t;

type qubesdb_initrc_t, qubes_init_domain;
type qubesdb_initrc_exec_t;
files_type(qubesdb_initrc_exec_t)
init_script_domain(qubesdb_initrc_t, qubesdb_initrc_exec_t)

type qubesdb_log_t;
logging_log_file(qubesdb_log_t)

type qubesdb_var_run_t;
files_type(qubesdb_var_run_t)

type qubes-desktop-run_exec_t;
application_domain(user_t, qubes-desktop-run_exec_t)

type qubes_log_t;
logging_log_file(qubes_log_t)

type qubes_origin_t;
files_type(qubes_origin_t)

type qubes_persistent_t;
files_type(qubes_persistent_t)

type qubes_persistent_config_t;
files_type(qubes_persistent_config_t)

type qubes_rpc_etc_t;
files_config_file(qubes_rpc_etc_t)

type qubes_rpc_stderror_t;
files_tmp_file(qubes_rpc_stderror_t)

# Workers invoked by qrexec-agent, but with no domain written yet
#
type qubes_rpc_worker_t;
type qubes_rpc_worker_exec_t;
init_system_domain(qubes_rpc_worker_t, qubes_rpc_worker_exec_t)

type qubes_shared_home_t;
userdom_user_home_content(qubes_shared_home_t)

type qubes-trigger-sync-appmenus_t;
type qubes-trigger-sync-appmenus_exec_t;
application_domain(qubes-trigger-sync-appmenus_t, qubes-trigger-sync-appmenus_exec_t)

  # xenstore-read (R2)
  #
  type qubes-trigger-sync-appmenus_worker_t;
  application_type(qubes-trigger-sync-appmenus_worker_t)
  corecmd_bin_entry_type(qubes-trigger-sync-appmenus_worker_t)

  type sync-appmenus_qrexec-client-vm_t, qrexec-client-vm_domain;
  application_type(sync-appmenus_qrexec-client-vm_t)
  qubes_core_qrexec_client_vm_entry_type(sync-appmenus_qrexec-client-vm_t)

    type sync-appmenus_qrexec-client-vm_sh_t, qrexec-client-vm_sh_domain;
    application_type(sync-appmenus_qrexec-client-vm_sh_t)
    corecmd_shell_entry_type(sync-appmenus_qrexec-client-vm_sh_t)

      type sync-appmenus_qrexec-client-vm_sh_worker_t, qrexec-client-vm_sh_worker_domain;;
      application_type(sync-appmenus_qrexec-client-vm_sh_worker_t)
      corecmd_bin_entry_type(sync-appmenus_qrexec-client-vm_sh_worker_t)

        type sync-appmenus_qrexec-client-vm_sh_awk_t;
        application_type(sync-appmenus_qrexec-client-vm_sh_awk_t)
        corecmd_bin_entry_type(sync-appmenus_qrexec-client-vm_sh_awk_t)

type qubes-trigger-sync-appmenus_etc_t;
files_config_file(qubes-trigger-sync-appmenus_etc_t)

type qubes_u2mfn_t, proc_type;
files_type(qubes_u2mfn_t)
#
# Must be added to base policy :(
#
#genfscon proc /u2mfn gen_context(system_u:object_r:qubes_u2mfn_t,s0)

type qubes_var_lib_t;
files_type(qubes_var_lib_t)

type qubes_var_run_t;
files_pid_file(qubes_var_run_t)

# Utils invoked by user, but with no domain written yet
#
type qvm_t;
type qvm_exec_t;
init_system_domain(qvm_t, qvm_exec_t)

type qvm-copy-to-vm_t;
type qvm-copy-to-vm_exec_t;
application_domain(qvm-copy-to-vm_t, qvm-copy-to-vm_exec_t)

  # ( du | tail | cut )
  #
  type qvm-copy-to-vm_worker_t;
  application_type(qvm-copy-to-vm_worker_t)
  corecmd_bin_entry_type(qvm-copy-to-vm_worker_t)

type setup-ip_t;
type setup-ip_exec_t;
application_domain(setup-ip_t, setup-ip_exec_t)
role system_r types setup-ip_t;

  # { xenstore_read route }
  #
  type setup-ip_worker_t;
  application_type(setup-ip_worker_t)
  corecmd_bin_entry_type(setup-ip_worker_t)
  role system_r types setup-ip_worker_t;

type tar2qfile_t;
type tar2qfile_exec_t;
init_system_domain(tar2qfile_t, tar2qfile_exec_t)


#########################################
#
# kernel_t local policy
#

filetrans_pattern(kernel_t, proc_t, qubes_u2mfn_t, file, "u2mfn")


#########################################
#
# mount_t local policy
#

allow mount_t qubes_persistent_t : dir { mounton write setattr };

allow mount_t home_root_t : dir write;
allow mount_t var_lib_t : dir write;


#########################################
#
# qfile-agent_t local policy
#

corecmd_search_bin(qfile-agent_t)

getty_use_fds(qfile-agent_t)
userdom_use_user_ttys(qfile-agent_t)

qubes_core_list_qubes_shared_home(qfile-agent_t)
qubes_core_read_qubes_shared_home_files(qfile-agent_t)

userdom_use_unpriv_users_fds(qfile-agent_t)
userdom_use_user_ptys(qfile-agent_t)


allow qfile-agent_t qrexec-client-vm_t : unix_stream_socket { read write };

# /dev/null
#
allow qfile-agent_t qvm-copy-to-vm_t : fd use;


#########################################
#
# qrexec-agent_t local policy
#

corecmd_search_bin(qrexec-agent_t)
domtrans_pattern(qrexec-agent_t, su_exec_t, qrexec-agent_su_t)

create_sock_files_pattern(qrexec-agent_t, qubes_var_run_t, qubes_var_run_t)

dev_rw_xen(qrexec-agent_t)

fs_search_xenfs(qrexec-agent_t)

qubes_core_rw_qrexec_agent_pipes(qrexec-agent_t)


allow qrexec-agent_t self : process signal;

# /dev/xen/xenbus
#
allow qrexec-agent_t device_t : chr_file { getattr read write open };

# proc_t perms for u2mfn:
#
# (qubes_u2mfn_t needs base-policy patch) :(
#
allow qrexec-agent_t { proc_t qubes_u2mfn_t } : file { read write open ioctl };

allow qrexec-agent_t qrexec-agent_log_t : file { append ioctl };

allow qrexec-agent_t xenfs_t : file { getattr read write open ioctl };


#########################################
#
# qrexec-agent_initrc_t local policy
#

init_read_script_files(qrexec-agent_initrc_t)
init_dontaudit_read_all_script_files(qrexec-agent_initrc_t)

# meminfo
#
kernel_dontaudit_read_system_state(qrexec-agent_initrc_t)

qubes_core_search_qubes_log(qrexec-agent_initrc_t)
allow qrexec-agent_initrc_t qrexec-agent_log_t : file { append open };

qubes_core_search_qubes_rpc_worker_exec(qrexec-agent_initrc_t)
domtrans_pattern(qrexec-agent_initrc_t, qrexec-agent_exec_t, qrexec-agent_t)

qubes_core_create_qubes_var_run_files(qrexec-agent_initrc_t)
qubes_core_write_qubes_var_run_files(qrexec-agent_initrc_t)
qubes_core_delete_qubes_var_run_files(qrexec-agent_initrc_t)

userdom_dontaudit_search_user_home_dirs(qrexec-agent_initrc_t)


allow qrexec-agent_initrc_t initrc_state_t : dir { create_dir_perms delete_dir_perms };


#########################################
#
# qrexec-agent_sh_t local policy
#

allow qrexec-agent_sh_t self : fifo_file read;


corecmd_bin_domtrans(qrexec-agent_sh_t, qrexec-agent_worker_t)
corecmd_list_bin(qrexec-agent_sh_t)

qubes_core_rwi_inherited_qrexec_agent_pipes(qrexec-agent_sh_t)

qubes_core_search_qubes_rpc_worker_exec(qrexec-agent_sh_t)
domtrans_pattern(qrexec-agent_sh_t, qubes-rpc-multiplexer_exec_t, qubes-rpc-multiplexer_t)

# .bash_profile:
#
userdom_dontaudit_read_user_home_content_files(qrexec-agent_sh_t)

# Needs to read /etc/passwd
#
allow qrexec-agent_sh_t etc_t : file read_file_perms;

# meminfo
#
kernel_dontaudit_read_system_state(qrexec-agent_sh_t)

qubes_core_bluepill_locale(qrexec-agent_sh_t)

qubes_core_rw_qrexec_agent_stream_sockets(qrexec-agent_sh_t)


#########################################
#
# qrexec-agent_su_t local policy
#

#su_restricted_domain_template(qrexec-agent, qrexec-agent_t, system_r)
#
# su.if implies that return to calling domain can be overridden,
# but how to do so is unclear.

allow qrexec-agent_su_t self : capability { setuid setgid };
allow qrexec-agent_su_t self : fifo_file read;
allow qrexec-agent_su_t self : process { setfscreate setsched };

# Note: execute alone permits checking +x only:
#
allow qrexec-agent_su_t xauth_exec_t : file execute;


auth_domtrans_chk_passwd(qrexec-agent_su_t)

domtrans_pattern(qrexec-agent_su_t, shell_exec_t, qrexec-agent_sh_t)

files_dontaudit_getattr_tmp_dirs(qrexec-agent_su_t)
files_dontaudit_search_tmp(qrexec-agent_su_t)

init_read_utmp(qrexec-agent_su_t)

# filesystems:
#
kernel_dontaudit_read_system_state(qrexec-agent_su_t)

kernel_read_kernel_sysctls(qrexec-agent_su_t)

logging_send_syslog_msg(qrexec-agent_su_t)

qubes_core_bluepill_locale(qrexec-agent_su_t)

qubes_core_rw_qrexec_agent_stream_sockets(qrexec-agent_su_t)

selinux_compute_access_vector(qrexec-agent_su_t)


create_dirs_pattern(qrexec-agent_su_t, tmp_t, tmp_t)
allow qrexec-agent_su_t tmp_t : dir { relabelfrom relabelto };

filetrans_add_pattern(qrexec-agent_su_t, tmp_t, user_tmp_t, dir, "root")
filetrans_add_pattern(qrexec-agent_su_t, tmp_t, user_tmp_t, dir, "user")
allow qrexec-agent_su_t user_tmp_t : dir { create getattr setattr relabelfrom relabelto };


#########################################
#
# qrexec-agent_worker_t local policy
#

qubes_core_bluepill_locale(qrexec-agent_worker_t)

qubes_core_rwi_inherited_qrexec_agent_pipes(qrexec-agent_worker_t)

qubes_core_sigchld_qrexec_agent_su(qrexec-agent_worker_t)

qubes_core_use_qrexec_agent_sh_fds(qrexec-agent_worker_t)
allow qrexec-agent_worker_t qrexec-agent_sh_t : fifo_file { write getattr };


allow qrexec-agent_worker_t self : capability sys_time;

allow qrexec-agent_worker_t qrexec-agent_sh_t : process sigchld;


#########################################
#
# qrexec-client-vm_domain local policy
#

fs_search_xenfs(qrexec-client-vm_domain)

getty_use_fds(qrexec-client-vm_domain)
userdom_use_user_ttys(qrexec-client-vm_domain)

qubes_core_write_var_run_sock_file(qrexec-client-vm_domain)
qubes_core_stream_connect_qrexec_agent(qrexec-client-vm_domain)

qubes_core_search_qubes_rpc_worker_exec(qrexec-client-vm_domain)

userdom_use_unpriv_users_fds(qrexec-client-vm_domain)
userdom_use_user_ptys(qrexec-client-vm_domain)


# /dev/xen/xenbus
#
allow qrexec-client-vm_domain device_t : chr_file { getattr read write open };

# gntalloc
#
allow qrexec-client-vm_domain xen_device_t : chr_file { read write open ioctl };

# /proc/xen/privcmd
#
allow qrexec-client-vm_domain xenfs_t : file { read write open ioctl };


#########################################
#
# qrexec-client-vm_t local policy
#

domtrans_pattern(qrexec-client-vm_t, qfile-agent_exec_t, qfile-agent_t)


#########################################
#
# qrexec-client-vm_sh_domain local policy
#

# meminfo
#
kernel_dontaudit_read_system_state(qrexec-client-vm_sh_domain)

getty_use_fds(qrexec-client-vm_sh_domain)
userdom_use_user_ttys(qrexec-client-vm_sh_domain)

qubes_core_bluepill_locale(qrexec-client-vm_sh_domain)

userdom_use_unpriv_users_fds(qrexec-client-vm_sh_domain)
userdom_use_user_ptys(qrexec-client-vm_sh_domain)


#########################################
#
# qrexec-client-vm_sh_worker_domain local policy
#

getty_use_fds(qrexec-client-vm_sh_worker_domain)
userdom_use_user_ttys(qrexec-client-vm_sh_worker_domain)

qubes_core_bluepill_locale(qrexec-client-vm_sh_worker_domain)

userdom_use_unpriv_users_fds(qrexec-client-vm_sh_worker_domain)
userdom_use_user_ptys(qrexec-client-vm_sh_worker_domain)


#########################################
#
# qubes-core_initrc_t local policy
#

fstools_domtrans(qubes-core_initrc_t)

init_dontaudit_read_all_script_files(qubes-core_initrc_t)

kernel_read_system_state(qubes-core_initrc_t)

mount_domtrans(qubes-core_initrc_t)

selinux_compute_create_context(qubes-core_initrc_t)

storage_getattr_fixed_disk_dev(qubes-core_initrc_t)
allow qubes-core_initrc_t fixed_disk_device_t : blk_file read;
#
# fixed_disk_device_t is systemhigh
#
ifdef(`enable_mls',`

	mls_file_read_to_clearance(qubes-core_initrc_t)
')

userdom_create_user_home_dirs(qubes-core_initrc_t)
userdom_search_user_home_dirs(qubes-core_initrc_t)

qubes_core_search_qubes_persistent(qubes-core_initrc_t)


filetrans_add_pattern(qubes-core_initrc_t, var_lib_t, qubes_var_lib_t, dir, "qubes")
allow qubes-core_initrc_t qubes_var_lib_t : dir { create setattr };
create_files_pattern(qubes-core_initrc_t, qubes_var_lib_t, qubes_var_lib_t)
allow qubes-core_initrc_t qubes_var_lib_t : file { write setattr };

filetrans_add_pattern(qubes-core_initrc_t, qubes_persistent_t, home_root_t, dir, "home")
filetrans_add_pattern(qubes-core_initrc_t, qubes_persistent_t, var_lib_t, dir, "varlib")
allow qubes-core_initrc_t var_lib_t : dir create;
filetrans_add_pattern(qubes-core_initrc_t, qubes_persistent_t, var_log_t, dir, "varlog")
allow qubes-core_initrc_t var_log_t : dir { getattr create };


#
# cp
#

userdom_home_filetrans_user_home_dir(qubes-core_initrc_t, "user")

# -Z
#
allow qubes-core_initrc_t user_home_dir_t : dir setattr_dir_perms;


# diff <- /dev/xvdb
#
allow qubes-core_initrc_t fixed_disk_device_t : blk_file { read open };


#########################################
#
# qubes_init_domain local policy
#

allow qubes_init_domain self : capability dac_override;
allow qubes_init_domain self : fifo_file { write read ioctl getattr };


corecmd_exec_bin(qubes_init_domain)
corecmd_exec_shell(qubes_init_domain)

files_read_etc_files(qubes_init_domain)
files_read_etc_runtime_files(qubes_init_domain)

fs_manage_cgroup_dirs(qubes_init_domain)
fs_manage_cgroup_files(qubes_init_domain)

init_exec_rc(qubes_init_domain)

init_read_script_status_files(qubes_init_domain)

# /dev/null
#
init_use_fds(qubes_init_domain)

init_use_script_ptys(qubes_init_domain)

logging_send_syslog_msg(qubes_init_domain)

qubes_core_bluepill_locale(qubes_init_domain)


allow qubes_init_domain initrc_state_t : dir list_dir_perms;
create_files_pattern(qubes_init_domain, initrc_state_t, initrc_state_t)
allow qubes_init_domain initrc_state_t : file write_file_perms;
delete_files_pattern(qubes_init_domain, initrc_state_t, initrc_state_t)
allow qubes_init_domain initrc_state_t : lnk_file { create_lnk_file_perms read_lnk_file_perms delete_lnk_file_perms };


#########################################
#
# qubes-net_initrc_t local policy
#

init_read_script_files(qubes-net_initrc_t)
init_dontaudit_read_all_script_files(qubes-net_initrc_t)

# openrc <- meminfo, mkdir <- filesystems
#
kernel_dontaudit_read_system_state(qubes-net_initrc_t)

# start:
#
qubes_core_setup_ip_domtrans(qubes-net_initrc_t)

# stop:
#
sysnet_domtrans_ifconfig(qubes-net_initrc_t)

userdom_dontaudit_search_user_home_dirs(qubes-net_initrc_t)


allow qubes-net_initrc_t qubesdb_initrc_exec_t : file getattr;


#########################################
#
# qubes-rpc-multiplexer_t local policy
#

qubes_core_rwi_inherited_qrexec_agent_pipes(qubes-rpc-multiplexer_t)

qubes_core_sigchld_qrexec_agent_su(qubes-rpc-multiplexer_t)

qubes_core_search_qubes_rpc_etc(qubes-rpc-multiplexer_t)

allow qubes-rpc-multiplexer_t qubes_rpc_stderror_t : fifo_file { write open getattr };

allow qubes-rpc-multiplexer_t shell_exec_t : file read;


corecmd_bin_domtrans(qubes-rpc-multiplexer_t, qubes-rpc-multiplexer_worker_t)

files_search_tmp(qubes-rpc-multiplexer_t)

# Just meminfo:
#
kernel_dontaudit_read_system_state(qubes-rpc-multiplexer_t)

# Presumably required for log locale:
#
qubes_core_bluepill_locale(qubes-rpc-multiplexer_t)

qubes_core_getattr_qubes_rpc_etc(qubes-rpc-multiplexer_t)

qubes_core_search_qubes_rpc_worker_exec(qubes-rpc-multiplexer_t)

qubes_core_rw_qrexec_agent_stream_sockets(qubes-rpc-multiplexer_t)

# For what? (seems to fail without this)
#
userdom_search_user_home_dirs(qubes-rpc-multiplexer_t)


# /dev/null
#
allow qubes-rpc-multiplexer_t qrexec-agent_su_t : fd use;


#########################################
#
# qubes-rpc-multiplexer_sh_t local policy
#

qubes_core_bluepill_locale(qubes-rpc-multiplexer_sh_t)


#########################################
#
# qubes-rpc-multiplexer_sh_awk_t local policy
#

qubes_core_bluepill_locale(qubes-rpc-multiplexer_sh_awk_t)


#########################################
#
# qubes-rpc-multiplexer_worker_t local policy
#

qubes_core_rwi_inherited_qrexec_agent_pipes(qubes-rpc-multiplexer_worker_t)

qubes_core_use_qubes_rpc_multiplexer_fds(qubes-rpc-multiplexer_worker_t)

qubes_core_rw_qrexec_agent_stream_sockets(qubes-rpc-multiplexer_worker_t)

allow qubes-rpc-multiplexer_worker_t qubes-rpc-multiplexer_t : process sigchld;

files_tmp_filetrans(qubes-rpc-multiplexer_worker_t, qubes_rpc_stderror_t, fifo_file)
allow qubes-rpc-multiplexer_worker_t qubes_rpc_stderror_t : fifo_file { create read open getattr write unlink };


# /dev/null
#
qubes_core_use_qrexec_agent_sh_fds(qubes-rpc-multiplexer_worker_t)


#
# logger
#

logging_send_syslog_msg(qubes-rpc-multiplexer_worker_t)

qubes_core_bluepill_locale(qubes-rpc-multiplexer_worker_t)

allow qubes-rpc-multiplexer_worker_t qubes-rpc-multiplexer_sh_t : process sigchld;


#########################################
#
# qubesdb_t local policy
#

allow qubesdb_t self : fifo_file { read write };

# Forks and kills parent:
#
allow qubesdb_t self : process signal;

# ( /dev/null | ld | qubesdb-daemon )
#
allow qubesdb_t qubesdb_initrc_t : fd use;


filetrans_pattern(qubesdb_t, qubes_var_run_t, qubesdb_var_run_t, sock_file)
allow qubesdb_t qubesdb_var_run_t : sock_file { create_sock_file_perms delete_sock_file_perms };

qubes_core_search_qubes_log(qubesdb_t)
allow qubesdb_t qubesdb_log_t: file { write open ioctl };

# pid
#
qubes_core_create_qubes_var_run_files(qubesdb_t)
qubes_core_write_qubes_var_run_files(qubesdb_t)
qubes_core_delete_qubes_var_run_files(qubesdb_t)

# /dev/xen/xenbus
#
allow qubesdb_t device_t : chr_file { read write getattr open ioctl };

# /dev/xen/evtchn
#
allow qubesdb_t xen_device_t : chr_file ioctl;

# /dev/xen/gntdev
#
allow qubesdb_t xen_device_t : chr_file { read write open };

fs_search_xenfs(qubesdb_t)
#
# /proc/xen/privcmd:
#
allow qubesdb_t xenfs_t : file { read open write ioctl };


#########################################
#
# qubesdb-cmd_t local policy
#

qubes_core_search_qubes_var_run(qubesdb-cmd_t)
allow qubesdb-cmd_t qubesdb_t : unix_stream_socket connectto;
allow qubesdb-cmd_t qubesdb_var_run_t : sock_file write;


#########################################
#
# qubesdb_initrc_t local policy
#

init_read_script_files(qubesdb_initrc_t)
#allow qubesdb_initrc_t initrc_exec_t : file execute;
init_dontaudit_read_all_script_files(qubesdb_initrc_t)

# ( cmdline | filesystems | meminfo )
#
#kernel_dontaudit_read_system_state(qubesdb_initrc_t)

qubes_core_qubesdb_domtrans(qubesdb_initrc_t)


allow qubesdb_initrc_t self : process setrlimit;

allow qubesdb_initrc_t initrc_state_t : dir { create_dir_perms delete_dir_perms };

#
# pkill
#

allow qubesdb_initrc_t proc_t : dir read;
allow qubesdb_initrc_t qubesdb_t : dir { getattr search };
#
# ( cmdline | status )
#
allow qubesdb_initrc_t qubesdb_t : file { read open };

allow qubesdb_initrc_t qubesdb_t : process signal;


#########################################
#
# qvm-copy-to-vm_t local policy
# 

allow qvm-copy-to-vm_t self : fifo_file read;

corecmd_bin_domtrans(qvm-copy-to-vm_t, qvm-copy-to-vm_worker_t)

getty_use_fds(qvm-copy-to-vm_t)
userdom_use_user_ttys(qvm-copy-to-vm_t)

# meminfo:
#
kernel_dontaudit_read_system_state(qvm-copy-to-vm_t)

miscfiles_read_localization(qvm-copy-to-vm_t)

qubes_core_search_qubes_rpc_worker_exec(qvm-copy-to-vm_t)
domtrans_pattern(qvm-copy-to-vm_t, qrexec-client-vm_exec_t, qrexec-client-vm_t)

qubes_core_search_qubes_shared_home(qvm-copy-to-vm_t)

userdom_use_user_ptys(qvm-copy-to-vm_t)


allow qvm-copy-to-vm_t qrexec-client-vm_exec_t : lnk_file read;

allow qvm-copy-to-vm_t shell_exec_t : file read;


#########################################
#
# qubes-trigger-sync-appmenus_t local policy
#

corecmd_bin_domtrans(qubes-trigger-sync-appmenus_t, qubes-trigger-sync-appmenus_worker_t)

getty_use_fds(qubes-trigger-sync-appmenus_t)
userdom_use_user_ttys(qubes-trigger-sync-appmenus_t)

qubes_core_qubesdb_cmd_domtrans(qubes-trigger-sync-appmenus_t)

qubes_core_search_qubes_rpc_worker_exec(qubes-trigger-sync-appmenus_t)
#qrexec_client_vm_domtrans(qubes-trigger-sync-appmenus_t)
qubes_core_qrexec_client_vm_domtrans(qubes-trigger-sync-appmenus_t, sync-appmenus_qrexec-client-vm_t)


allow qubes-trigger-sync-appmenus_t self : fifo_file read;


# testing
#
allow qubes-trigger-sync-appmenus_t shell_exec_t : file read;


#########################################
#
# qubes-trigger-sync-appmenus_worker_t local policy
#

getty_use_fds(qubes-trigger-sync-appmenus_worker_t)
userdom_use_user_ttys(qubes-trigger-sync-appmenus_worker_t)


# for pipefs
#
allow qubes-trigger-sync-appmenus_worker_t qubes-trigger-sync-appmenus_t : fd use;
allow qubes-trigger-sync-appmenus_worker_t qubes-trigger-sync-appmenus_t : fifo_file { write getattr };

allow qubes-trigger-sync-appmenus_worker_t qubes-trigger-sync-appmenus_t : process sigchld;

allow qubes-trigger-sync-appmenus_worker_t xenfs_t : file { getattr read write open };


#########################################
#
# qvm-copy-to-vm_worker_t local policy
# 

allow qvm-copy-to-vm_worker_t qvm-copy-to-vm_t : fd use;
allow qvm-copy-to-vm_worker_t qvm-copy-to-vm_t : fifo_file { write read getattr };

allow qvm-copy-to-vm_worker_t qvm-copy-to-vm_t : process sigchld;


getty_use_fds(qvm-copy-to-vm_worker_t)
userdom_use_user_ttys(qvm-copy-to-vm_worker_t)

# Presumably stderr of ( cut | tail ) is redirected to qrexec-agent.log
#
qubes_core_bluepill_locale(qvm-copy-to-vm_worker_t)

userdom_use_unpriv_users_fds(qvm-copy-to-vm_worker_t)
userdom_use_user_ptys(qvm-copy-to-vm_worker_t)

#
# du
#

fs_search_cgroup_dirs(qvm-copy-to-vm_worker_t)

allow qvm-copy-to-vm_worker_t configfs_t : dir getattr;

allow qvm-copy-to-vm_worker_t xenfs_t : dir getattr;

# du getattr /tmp:
#
files_getattr_tmp_dirs(qvm-copy-to-vm_worker_t)

# du read mtab:
#
files_read_etc_runtime_files(qvm-copy-to-vm_worker_t)

# du getattr /dev/shm:
#
fs_getattr_tmpfs_dirs(qvm-copy-to-vm_worker_t)

qubes_core_getattr_qubes_shared_home_files(qvm-copy-to-vm_worker_t)
qubes_core_list_qubes_shared_home(qvm-copy-to-vm_worker_t)


#########################################
#
# setup-ip_t local policy
#

corecmd_bin_domtrans(setup-ip_t, setup-ip_worker_t)

# /dev/null
#
init_use_fds(setup-ip_t)

init_use_script_fds(setup-ip_t)
init_use_script_ptys(setup-ip_t)

# meminfo
#
kernel_dontaudit_read_system_state(setup-ip_t)

qubes_core_bluepill_locale(setup-ip_t)

# cwd
#
qubes_core_search_qubes_rpc_worker_exec(setup-ip_t)

qubes_core_qubesdb_cmd_domtrans(setup-ip_t)

sysnet_domtrans_ifconfig(setup-ip_t)

# resolv.conf
#
sysnet_read_config(setup-ip_t)


allow setup-ip_t self : fifo_file read;

allow setup-ip_t shell_exec_t : file read;


#########################################
#
# setup-ip_worker_t local policy
#

init_use_script_fds(setup-ip_worker_t)
init_use_script_ptys(setup-ip_worker_t)

qubes_core_bluepill_locale(setup-ip_worker_t)


allow setup-ip_worker_t setup-ip_t : process sigchld;

allow setup-ip_worker_t setup-ip_t : fd use;
allow setup-ip_worker_t setup-ip_t : fifo_file { write getattr };

#
# route
#

allow setup-ip_worker_t self : capability net_admin;
allow setup-ip_worker_t self : udp_socket { create ioctl };

#
# xenstore-read
#

# /dev/null:
#
init_use_fds(setup-ip_worker_t)

fs_search_xenfs(setup-ip_worker_t)
allow setup-ip_worker_t xenfs_t : file { getattr read write open };


#########################################
#
# sync-appmenus_qrexec-client-vm_sh_awk_t local policy
#

qubes_core_bluepill_locale(sync-appmenus_qrexec-client-vm_sh_awk_t)


#########################################
#
# sysadm_r local policy
#

qubes_core_qubes_trigger_sync_appmenus_role(sysadm_r, sysadm_t)
qubes_core_qvm_role(sysadm_r, sysadm_t)


#########################################
#
# user_r local policy
#

qubes_core_qvm_role(user_r, user_t)


#########################################
#
# tmpfiles_t local policy
#

files_search_home(tmpfiles_t)
filetrans_add_pattern(tmpfiles_t, user_home_dir_t, qubes_shared_home_t, dir, "QubesIncoming")
allow tmpfiles_t qubes_shared_home_t : dir { getattr setattr };

filetrans_add_pattern(tmpfiles_t, tmp_t, user_tmp_t, dir, "root")
filetrans_add_pattern(tmpfiles_t, tmp_t, user_tmp_t, dir, "user")
files_pid_filetrans(tmpfiles_t, qubes_var_run_t, dir, "qubes")

allow tmpfiles_t qubes_persistent_t : dir search;
allow tmpfiles_t qubes_persistent_config_t : dir { getattr search };

allow tmpfiles_t { proc_t qubes_u2mfn_t } : file setattr;

fs_search_xenfs(tmpfiles_t)
allow tmpfiles_t xenfs_t : dir getattr;
allow tmpfiles_t xenfs_t : file { getattr setattr };

allow tmpfiles_t qubes_var_lib_t : dir getattr;

logging_log_filetrans(tmpfiles_t, qubes_log_t, dir, "qubes")
allow tmpfiles_t qubes_log_t : dir { create setattr };
qubes_core_qubes_log_filetrans(tmpfiles_t, qrexec-agent_log_t, file, "qrexec-agent.log")
allow tmpfiles_t qrexec-agent_log_t : file { create write open getattr setattr };
qubes_core_qubes_log_filetrans(tmpfiles_t, qubesdb_log_t, file, "qubesdb.log")
allow tmpfiles_t qubesdb_log_t : file { getattr setattr };



#########################################
#
# Tunable policy
#

#tunable_policy(`qubes_backdoor',`


	gen_require(`

		class passwd passwd;
	')

	#########################################
	#
	# Declarations
	#

	# Called for incoming copy:
	#
	corecmd_shell_entry_type(qubes-rpc-multiplexer_sh_t)
	role system_r types qubes-rpc-multiplexer_sh_t;

	  # ( find | xargs )
	  #
	  corecmd_bin_entry_type(qubes-rpc-multiplexer_sh_worker_t)
	  role system_r types qubes-rpc-multiplexer_sh_worker_t;

	    # ( awk | sleep )
	    #
	    corecmd_bin_entry_type(qubes-rpc-multiplexer_sh_awk_t)
	    role system_r types qubes-rpc-multiplexer_sh_awk_t;


	#########################################
	#
	# Local policy
	#

	role_transition system_r qbkdr_run_exec_t user_r;
	role_transition system_r qubes-desktop-run_exec_t user_r;


	#########################################
	#
	# qfile-unpacker_t local policy
	#

	allow qfile-unpacker_t self : capability { setgid setuid sys_chroot };
	auditallow qfile-unpacker_t self : capability  dac_override;
	#
	# Oh dear...
	#
	allow qfile-unpacker_t self : capability sys_admin;
	auditallow qfile-unpacker_t self : capability sys_admin;

	corecmd_search_bin(qfile-unpacker_t)

	qubes_core_bind_shared_home_files(qfile-unpacker_t)

	qubes_core_create_qubes_shared_home_files(qfile-unpacker_t)
	qubes_core_write_qubes_shared_home_files(qfile-unpacker_t)
	qubes_core_link_qubes_shared_home_files(qfile-unpacker_t)
	#
	# qfile-unpacker creates files with no dac perms, then
	# restores perms once created. The idea is to ensure
	# the user will know what they're opening.
	#
	qubes_core_setattr_qubes_shared_home_files(qfile-unpacker_t)
	allow qfile-unpacker_t qubes_shared_home_t : dir setattr;
	allow qfile-unpacker_t qubes_shared_home_t : lnk_file { create read write append setattr getattr unlink };

	qubes_core_rw_inherited_qrexec_agent_pipes(qfile-unpacker_t)

	qubes_core_rw_qrexec_agent_stream_sockets(qfile-unpacker_t)

	qubes_core_sigchld_qrexec_agent_su(qfile-unpacker_t)

	qubes_core_write_inherited_qubes_rpc_stderror(qfile-unpacker_t)


	# must be able to read /etc/passwd:
	#
	allow qfile-unpacker_t etc_t : file read_file_perms;


	#########################################
	#
	# qrexec-agent_t local policy

	allow qrexec-agent_t self : passwd passwd;


	#########################################
	#
	# qrexec-agent_sh_t local policy
	#

	domain_role_change_exemption(qrexec-agent_sh_t)
	#domain_subj_id_change_exemption(qrexec-agent_sh_t)

	domtrans_pattern(qrexec-agent_sh_t, qbkdr_run_exec_t, user_t)
	domtrans_pattern(qrexec-agent_sh_t, qubes-desktop-run_exec_t, user_t)

	userdom_search_user_home_dirs(qrexec-agent_sh_t)


	ifdef(`enable_mls',`

		range_transition qrexec-agent_sh_t qubes-desktop-run_exec_t : process s0 - s0;
	')


	#########################################
	#
	# qrexec-agent_su_t local policy
	#

	# Preserve cwd for qvm-run:
	#
	userdom_search_user_home_dirs(qrexec-agent_su_t)


	allow qrexec-agent_su_t self : netlink_selinux_socket { create bind };


	#########################################
	#
	# qrexec-client-vm_t local policy
	#

	corecmd_shell_domtrans(qrexec-client-vm_t, qrexec-client-vm_sh_t)


	#########################################
	#
	# qrexec-client-vm_sh_t local policy
	#

	corecmd_search_bin(qrexec-client-vm_sh_t)

	qubes_core_search_qubes_rpc_etc(qrexec-client-vm_sh_t)
	allow qrexec-client-vm_sh_t qubes-trigger-sync-appmenus_etc_t : file { read open getattr };
	auditallow qrexec-client-vm_sh_t qubes-trigger-sync-appmenus_etc_t : file getattr;


	allow qrexec-client-vm_sh_t qrexec-client-vm_t : process sigchld;

	# shell bin
	#
	allow qrexec-client-vm_sh_t qrexec-client-vm_t : fd use;


	allow qrexec-client-vm_sh_t qrexec-client-vm_t : unix_stream_socket { read write };


	#########################################
	#
	# qubes-rpc-multiplexer_t local policy
	#

	corecmd_shell_domtrans(qubes-rpc-multiplexer_t, qubes-rpc-multiplexer_sh_t)


	#########################################
	#
	# qubes-rpc-multiplexer_sh_t local policy
	#

	corecmd_bin_domtrans(qubes-rpc-multiplexer_sh_t, qubes-rpc-multiplexer_sh_worker_t)

	qubes_core_rw_inherited_qrexec_agent_pipes(qubes-rpc-multiplexer_sh_t)

	qubes_core_write_inherited_qubes_rpc_stderror(qubes-rpc-multiplexer_sh_t)

	qubes_core_getattr_qubes_rpc_etc(qubes-rpc-multiplexer_sh_t)
	qubes_core_read_qubes_rpc_etc(qubes-rpc-multiplexer_sh_t)

	qubes_core_search_qubes_rpc_worker_exec(qubes-rpc-multiplexer_sh_t)
	domtrans_pattern(qubes-rpc-multiplexer_sh_t, qfile-unpacker_exec_t, qfile-unpacker_t)

	qubes_core_rw_qrexec_agent_stream_sockets(qubes-rpc-multiplexer_sh_t)

	qubes_core_sigchld_qrexec_agent_su(qubes-rpc-multiplexer_sh_t)

	# /dev/null
	#
	qubes_core_use_qrexec_agent_sh_fds(qubes-rpc-multiplexer_sh_t)


	#########################################
	#
	# qubes-rpc-multiplexer_sh_worker_t local policy
	#

	corecmd_bin_domtrans(qubes-rpc-multiplexer_sh_worker_t, qubes-rpc-multiplexer_sh_awk_t)

	allow qubes-rpc-multiplexer_sh_worker_t qubes-rpc-multiplexer_sh_t : process sigchld;

	# pipefs
	#
	qubes_core_rw_inherited_qrexec_agent_pipes(qubes-rpc-multiplexer_sh_worker_t)
	allow qubes-rpc-multiplexer_sh_worker_t self : fifo_file read;
	allow qubes-rpc-multiplexer_sh_worker_t qubes-rpc-multiplexer_sh_t : fd use;
	allow qubes-rpc-multiplexer_sh_worker_t qubes-rpc-multiplexer_sh_t : fifo_file { write read };

	#
	# find
	#

	qubes_core_write_inherited_qubes_rpc_stderror(qubes-rpc-multiplexer_sh_worker_t)

	# find list applications
	#
	files_list_usr(qubes-rpc-multiplexer_sh_worker_t)

	#
	# xargs
	#

	# xargs <- awk
	#
	allow qubes-rpc-multiplexer_sh_worker_t bin_t : lnk_file read;


	#########################################
	#
	# qubes-rpc-multiplexer_sh_awk_t local policy
	#

	files_read_usr_files(qubes-rpc-multiplexer_sh_awk_t)

	allow qubes-rpc-multiplexer_sh_awk_t qubes-rpc-multiplexer_sh_worker_t : process sigchld;

	# ld:
	#
	allow qubes-rpc-multiplexer_sh_awk_t qubes-rpc-multiplexer_sh_worker_t : fd use;

	#
	# sleep
	#

	qubes_core_write_inherited_qubes_rpc_stderror(qubes-rpc-multiplexer_sh_awk_t)

	qubes_core_rw_inherited_qrexec_agent_pipes(qubes-rpc-multiplexer_sh_awk_t)


	#########################################
	#
	# sync-appmenus_qrexec-client-vm_t local policy
	#

	corecmd_shell_domtrans(sync-appmenus_qrexec-client-vm_t, sync-appmenus_qrexec-client-vm_sh_t)


	#########################################
	#
	# sync-appmenus_qrexec-client-vm_sh_t local policy
	#

	corecmd_bin_domtrans(sync-appmenus_qrexec-client-vm_sh_t, sync-appmenus_qrexec-client-vm_sh_worker_t)

	qubes_core_search_qubes_rpc_etc(sync-appmenus_qrexec-client-vm_sh_t)
	allow sync-appmenus_qrexec-client-vm_sh_t qubes-trigger-sync-appmenus_etc_t : file { read open getattr };
	auditallow sync-appmenus_qrexec-client-vm_sh_t qubes-trigger-sync-appmenus_etc_t : file getattr;


	allow sync-appmenus_qrexec-client-vm_sh_t sync-appmenus_qrexec-client-vm_t : process sigchld;

	# shell bin
	#
	allow sync-appmenus_qrexec-client-vm_sh_t sync-appmenus_qrexec-client-vm_t : fd use;


	allow sync-appmenus_qrexec-client-vm_sh_t sync-appmenus_qrexec-client-vm_t : unix_stream_socket { read write };


	#########################################
	#
	# sync-appmenus_qrexec-client-vm_sh_awk_t local policy
	#

	allow sync-appmenus_qrexec-client-vm_sh_awk_t sync-appmenus_qrexec-client-vm_sh_worker_t : process sigchld;

	# self bin
	#
	allow sync-appmenus_qrexec-client-vm_sh_awk_t sync-appmenus_qrexec-client-vm_sh_worker_t : fd use;


	allow sync-appmenus_qrexec-client-vm_sh_awk_t sync-appmenus_qrexec-client-vm_t : fd use;
	allow sync-appmenus_qrexec-client-vm_sh_awk_t sync-appmenus_qrexec-client-vm_t : unix_stream_socket { read write };


	allow sync-appmenus_qrexec-client-vm_sh_awk_t usr_t : file { read open getattr };


	#########################################
	#
	# sync-appmenus_qrexec-client-vm_sh_worker_t local policy
	#

	allow sync-appmenus_qrexec-client-vm_sh_worker_t self : fifo_file { read write };

	allow sync-appmenus_qrexec-client-vm_sh_worker_t sync-appmenus_qrexec-client-vm_sh_t : process sigchld;

	# ( find | xargs ) pipe
	#
	allow sync-appmenus_qrexec-client-vm_sh_worker_t sync-appmenus_qrexec-client-vm_sh_t : fd use;
	allow sync-appmenus_qrexec-client-vm_sh_worker_t sync-appmenus_qrexec-client-vm_sh_t : fifo_file { read write };

	# ( find | xargs ) socket
	#
	allow sync-appmenus_qrexec-client-vm_sh_worker_t sync-appmenus_qrexec-client-vm_t : fd use;
	allow sync-appmenus_qrexec-client-vm_sh_worker_t sync-appmenus_qrexec-client-vm_t : unix_stream_socket { read write };

	# find
	#
	corecmd_list_bin(sync-appmenus_qrexec-client-vm_sh_worker_t)
	#
	# so apparently corecmd_list_bin doesn't work...
	#
	allow sync-appmenus_qrexec-client-vm_sh_worker_t usr_t : dir read;

	# xargs
	#
	corecmd_read_bin_symlinks(sync-appmenus_qrexec-client-vm_sh_worker_t)
	corecmd_bin_domtrans(sync-appmenus_qrexec-client-vm_sh_worker_t, sync-appmenus_qrexec-client-vm_sh_awk_t)


	#########################################
	#
	# user_t
	#

	qubes_core_sigchld_qrexec_agent_su(user_t)

	qubes_core_write_inherited_qrexec_agent_pipes(user_t)

	# Unfortunately, this means user_t can determine that
	# this is a Qubes domain. More unfortunately, there are
	# many other ways to do so.
	#
	allow user_t qubes-desktop-run_exec_t : file { read open };
#')


tunable_policy(`qubes_core_pass_io',`


	#########################################
	#
	# qrexec-agent_worker_t local policy
	#

	#
	# cat
	#

	qubes_core_read_qubes_shared_home_files(qrexec-agent_worker_t)

	qubes_core_rw_qrexec_agent_stream_sockets(qrexec-agent_worker_t)
	allow qrexec-agent_worker_t qrexec-agent_t : unix_stream_socket getattr;
')


#########################################
#
# Optional policy
#

optional_policy(`

	gen_require(`

		type user_screen_t;
	')

	# for /dev/pty
	#
	allow qfile-agent_t user_screen_t : fd use;
	allow qrexec-client-vm_t user_screen_t : fd use;
	allow qvm-copy-to-vm_t user_screen_t : fd use;
')


#########################################
#
# Conditional policy
#

ifdef(`use_net',`

	# resolv.conf
	#
	allow setup-ip_t net_conf_t : file { write append };
')


#########################################
#
# Temporary policy
#

userdom_search_user_home_dirs(qubes-rpc-multiplexer_sh_t)
